package com.dmitrikuznetsov.ttu.taxagent;

import org.json.JSONObject;

import android.content.Intent;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.dmitrikuznetsov.dklib.tools.localization.Translate;
import com.dmitrikuznetsov.dklib.tools.log.LogWriter;
import com.dmitrikuznetsov.dklib.ui.base.DKActivityBase;
import com.dmitrikuznetsov.dklib.ui.base.DKDialog;

public class TaxYearsActivity extends DKActivityBase
{
	
	public static final String 	EXTRA_INT_TAX_PAYER_ID		=	"EXTRA_INT_TAX_PAYER_ID";
	
	/**
	 * ID of tax payer, passed
	 */
	public int TaxPayerID = -1;
	
	//Tax payer information
	JSONObject taxPayerInfo = null;
	
	/**
	 * Storage for storing settings
	 */
	SharedStorage storage = null;
	
	
	/**
	 * Indicates that this activity was opened first
	 */
	boolean	firstRun = true;
	
	
	@Override 
	public int getDefaultLayout() 
	{
		return R.layout.taxyearslayout;
	}
	
	TextView textTaxPayerName 			= null;
	TextView textTaxPayerCreationDate 	= null;
	TextView textTaxPayerIncome 		= null;
	
	/**
	 * Called when activity is created
	 */
	public void onCreated()
	{
		try 
		{
			//find ui elements on the form:
			textTaxPayerName 			= (TextView)this.getElementById(R.id.textTaxPayerName);
			textTaxPayerCreationDate 	= (TextView)this.getElementById(R.id.textTaxPayerDateOfCreation);
			textTaxPayerIncome 			= (TextView)this.getElementById(R.id.textTaxPayerIncome);
		      
			TaxPayerID = getIntent().getExtras().getInt( TaxYearsActivity.EXTRA_INT_TAX_PAYER_ID );
		} 
		catch (Exception e)
		{
			DKDialog.ShowMessage(this,
					Translate.translate("Error") , 
					Translate.translate("Loading default activitiy failed!"),
					Translate.translate("OK"),
					Translate.translate("Cancel"));
			
			LogWriter.writeException(this, e.getMessage(), e);
		}
	}
	
	
	protected void onPause() 
	{
	    super.onPause();
	    	
	    //destroy storage
	    storage = null;
	}
	
	
	protected void onResume() 
	{
	    	super.onResume();
	    	
	    	try
	    	{
	    		storage = new SharedStorage(this);
	    		
	    		//populate data but only for the first time !
	    		if( firstRun )
	    		{
	    			//populate with the values
	    			loadInfo();	
	    			
	    			firstRun = false;
	    			
	    			textTaxPayerName.setText( taxPayerInfo.getString("Name") );
	    			textTaxPayerCreationDate.setText( taxPayerInfo.getString("DateOfCreation") );
	    			textTaxPayerIncome.setText( taxPayerInfo.getString("textTaxPayerIncome") );
	    			
	    			//tax payer type
	    			int type = taxPayerInfo.getInt("Type");
	    		}
	    		
	    	}
	    	catch(Exception ex)
	    	{
	    		DKDialog.ShowMessage(this,
						Translate.translate("Error") , 
						Translate.translate("Reading settings activitiy failed!"),
						Translate.translate("OK"),
						Translate.translate("Cancel"));
				
				LogWriter.writeException(this, ex.getMessage(), ex);
	    	}

	 }
	
	/**
	 * Loads detailed tax payer info
	 */
	public void loadInfo()
	{
		//try to connect
    	try
    	{	
    		
			HTTPConnection connection = new HTTPConnection(  storage.getServerURL() );
			JSONObject response = connection.connectJSON( Engine.getTaxPayerInfo( TaxPayerID ) );
			storage.setLastServerResponse( response.toString() );
			
			if( !response.getString("result").equals("OK") )
			{
				throw new Exception("Invalid response from server = " + response.getString("data") );
			}
			
			//read results
			JSONObject data = response.getJSONArray("data").getJSONObject(0);
			
			//Fill the activity with results
			taxPayerInfo = data;
    	}
    	catch(Exception ex)
    	{
    		DKDialog.ShowMessage( this,
					Translate.translate("Error") , 
					Translate.translate("Connection failed: " + ex.getMessage()),
					Translate.translate("OK"),
					Translate.translate("Cancel"));
			
			LogWriter.writeException( this, ex.getMessage(), ex);
			
			storage.setLastServerResponse( ex.toString() );
		
    	}
	}
}

