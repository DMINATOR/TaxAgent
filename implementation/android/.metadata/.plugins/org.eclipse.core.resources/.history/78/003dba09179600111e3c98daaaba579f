package com.dmitrikuznetsov.ttu.taxagent;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import com.dmitrikuznetsov.dklib.tools.localization.Translate;
import com.dmitrikuznetsov.dklib.tools.log.LogWriter;
import com.dmitrikuznetsov.dklib.ui.base.DKActivityBase;
import com.dmitrikuznetsov.dklib.ui.base.DKDialog;

public class TaxYearsActivity extends DKActivityBase
{
	
	public static final String 	EXTRA_INT_TAX_PAYER_ID		=	"EXTRA_INT_TAX_PAYER_ID";
	
	/**
	 * ID of tax payer, passed
	 */
	public int TaxPayerID = -1;
	
	//Tax payer information
	JSONObject taxPayerInfo = null;
	
	//Array of tax years
	JSONArray array = null;
	
	/**
	 * Storage for storing settings
	 */
	SharedStorage storage = null;
	
	
	/**
	 * Indicates that this activity was opened first
	 */
	boolean	firstRun = true;
	
	
	@Override 
	public int getDefaultLayout() 
	{
		return R.layout.taxyearslayout;
	}
	
	TextView textTaxPayerName 			= null;
	TextView textTaxPayerCreationDate 	= null;
	TextView textTaxPayerIncome 		= null;
	TextView textTaxPayerType 			= null;
	
	ListView lvTaxYearGrid 				= null;
	
	/**
	 * Called when activity is created
	 */
	public void onCreated()
	{
		try 
		{
			//find ui elements on the form:
			textTaxPayerName 			= (TextView)this.getElementById(R.id.textTaxPayerName);
			textTaxPayerCreationDate 	= (TextView)this.getElementById(R.id.textTaxPayerDateOfCreation);
			textTaxPayerIncome 			= (TextView)this.getElementById(R.id.textTaxPayerIncome);
			textTaxPayerType			= (TextView)this.getElementById(R.id.textTaxPayerType);
			
			lvTaxYearGrid				= (ListView)this.getElementById(R.id.listViewTaxPayerYears);
	
			lvTaxYearGrid.setOnItemClickListener( clickListener );
			
			TaxPayerID = getIntent().getExtras().getInt( TaxYearsActivity.EXTRA_INT_TAX_PAYER_ID );
		} 
		catch (Exception e)
		{
			DKDialog.ShowMessage(this,
					Translate.translate("Error") , 
					Translate.translate("Loading default activitiy failed!"),
					Translate.translate("OK"),
					Translate.translate("Cancel"));
			
			LogWriter.writeException(this, e.getMessage(), e);
		}
	}
	
	
	protected void onPause() 
	{
	    super.onPause();
	    	
	    //destroy storage
	    storage = null;
	}
	
	
	protected void onResume() 
	{
	    	super.onResume();
	    	
	    	try
	    	{
	    		storage = new SharedStorage(this);
	    		
	    		//populate data but only for the first time !
	    		if( firstRun )
	    		{
	    			//populate with the values
	    			loadInfo();	
	    			
	    			firstRun = false;
	    		
	    		}
	    		
	    	}
	    	catch(Exception ex)
	    	{
	    		DKDialog.ShowMessage(this,
						Translate.translate("Error") , 
						Translate.translate("Reading settings activitiy failed!"),
						Translate.translate("OK"),
						Translate.translate("Cancel"));
				
				LogWriter.writeException(this, ex.getMessage(), ex);
	    	}

	 }
	
	/**
	 * Loads detailed tax payer info
	 */
	public void loadInfo()
	{
		//try to connect
    	try
    	{	
    		
			HTTPConnection connection = new HTTPConnection(  storage.getServerURL() );
			JSONObject response = connection.connectJSON( Engine.getTaxPayerInfo( TaxPayerID ) );
			storage.setLastServerResponse( response.toString() );
			
			if( !response.getString("result").equals("OK") )
			{
				throw new Exception("Invalid response from server = " + response.getString("data") );
			}
			
			//read results
			JSONObject data = response.getJSONArray("data").getJSONObject(0);
			
			//Fill the activity with results
			taxPayerInfo = data;
			
			textTaxPayerName.setText( taxPayerInfo.getString("Name") );
			textTaxPayerCreationDate.setText( "Date of creation: " + taxPayerInfo.getString("DateOfCreation") + " " );
			textTaxPayerIncome.setText( "Income: " +  taxPayerInfo.getString("Income") + " \u20AC" );
			
			//tax payer type
			int type = taxPayerInfo.getInt("Type");
			
			if( type == 0 )
			{
				//individual
				textTaxPayerType.setText("Individual");
			}
			else
				if( type == 1 )
				{
					//business
					textTaxPayerType.setText("Business");
				}
				else
				{
					//not expected!
					throw new Exception("Unexpected tax payer type: " + type);
				}
			
			loadTaxYears();
    	}
    	catch(Exception ex)
    	{
    		DKDialog.ShowMessage( this,
					Translate.translate("Error") , 
					Translate.translate("Connection failed: " + ex.getMessage()),
					Translate.translate("OK"),
					Translate.translate("Cancel"));
			
			LogWriter.writeException( this, ex.getMessage(), ex);
			
			storage.setLastServerResponse( ex.toString() );
		
    	}
	}
	
	/**
	 * Loads tax payer tax years information
	 * @throws Exception 
	 * @throws JSONException 
	 */
	public void loadTaxYears() throws JSONException, Exception
	{
		HTTPConnection connection = new HTTPConnection(  storage.getServerURL() );
		JSONObject response = connection.connectJSON( Engine.TaxYearGrid( TaxPayerID ) );
		storage.setLastServerResponse( response.toString() );
		
		//retrieve the array of items
		array = response.getJSONArray("data");
		
		List<String> items = new ArrayList<String>();
		
		for(int i = 0; i < array.length(); i++ )
		{
			JSONObject subObject = array.getJSONObject(i);
			
			items.add( String.valueOf(subObject.getInt("Year")));
		}

		//specify changes
		lvTaxYearGrid.setAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, items ));
		
	}
	
	/**
	 * Occurs when one of the tax years has been clicked
	 */
	public OnItemClickListener clickListener = new OnItemClickListener() {

		public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
				long arg3) {
			//get the year that was clicked on:
			try 
			{
				JSONObject subObject = array.getJSONObject(arg2);
				
				
				//all ok open up the tax payer info page:
				Intent intent = new Intent();
				intent.putExtra( TaxYearStatsActivity.EXTRA_INT_TAX_PAYER_ID, TaxPayerID );
				intent.putExtra( TaxYearStatsActivity.EXTRA_INT_TAX_YEAR_ID, subObject.getInt("ID") );
				intent.putExtra( TaxYearStatsActivity.EXTRA_INT_TAX_YEAR_VALUE, subObject.getInt("Year") );
    			intent.setClass( TaxYearsActivity.this, TaxYearStatsActivity.class);
    		    startActivity(intent);
			} 
			catch (JSONException ex) 
			{
				DKDialog.ShowMessage( TaxYearsActivity.this,
						Translate.translate("Error") , 
						Translate.translate("Failed to perform click: " + ex.getMessage()),
						Translate.translate("OK"),
						Translate.translate("Cancel"));
			}
		}
	};
	
	
	
	
	 /**
	  * Adapter class for showing result of selected programs
	  * 
	  * @author Dmitri Kuznetsov
	  *
	  */
	 private class FilesListAdapter extends BaseAdapter 
	 {

		
		/**
		 * Context that owns this adapter
		 */
		private Context _context = null;

		/**
		 * View that is inflated from XML
		 */
		LayoutInflater _inflater = null;

		public FilesListAdapter(Context context) throws Exception
		{
			_context 	= context;
			
			_inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			
			if( _inflater == null )
			{
				throw new Exception("Couldn't create layout inflater!");
			}
			
		}

		public int getCount()
		{
			return items.length;
		}

		@Override
		public boolean areAllItemsEnabled()
		{
			return false;
		}

		public Object getItem(int position)
		{
			return items[position];
		}

		public long getItemId(int position)
		{
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent)
		{
			if ( (items == null) || (items.length == 0) || (position >= items.length))
			{
				TextView tv = new TextView(_context);
				tv.setText("No items.");

				return tv;
			}
			else
			{
				

					File currentFile = (File)getItem(position);
				
					
				 //create new layout
					LinearLayout layout = new LinearLayout(_context);
					layout.setOrientation(LinearLayout.VERTICAL);
					
					View _inflatedView = _inflater.inflate( R.layout.debug_file_manager_file_info, null);
					
					//find values that we need to change
					TextView left 	= (TextView) _inflatedView.findViewById( R.id.debug_file_manager_left);
					TextView right 	= (TextView) _inflatedView.findViewById( R.id.debug_file_manager_right);
					
					if( file == null )
					{
						left.setText( "/" );
					}
					else
					{
						left.setText( currentFile.getName() );					
					}
					
					//by the color notify the user
					if( currentFile.canRead() )
					{
						
						if( currentFile.canWrite())
						{
							//WRITE/READ
							left.setTextColor(Color.GREEN);
						}
						else
						{
							//READ
							left.setTextColor(Color.YELLOW);
						}
					}
					else
					{
						//Not allowed!
						left.setTextColor(Color.RED);
					}
					
					//now write the values
					if( currentFile.isDirectory() )
	    		 	{
	    		 		right.setText( "->" ); //write symbol that it is a dir
	    		 	}
	    		 	else
	    		 	{
	    		 		//write file size:
	    		 		
	    		 		//depending on the size select the right choice
	    		 		if( currentFile.length() <= 1024 )
	    		 		{
	    		 			right.setText( currentFile.length()  + " Bytes"  ); 
	    		 		}
	    		 		else
	    		 		{
		    		 		right.setText( (currentFile.length() >> 10 ) + " KB"  ); //write file size in KB
	    		 		}

	    		 	}
					
					//add view to the main view
					layout.addView( _inflatedView, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT,
							LayoutParams.WRAP_CONTENT));
					
					
	         		return layout;
				
			}

		}
	 }
}

